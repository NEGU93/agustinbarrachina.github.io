{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let AppearDirective = /*#__PURE__*/(() => {\n  class AppearDirective {\n    constructor(element) {\n      this.element = element;\n      this.appear = new EventEmitter();\n    }\n\n    saveDimensions() {\n      this.elementPos = this.getOffsetTop(this.element.nativeElement);\n      this.elementHeight = this.element.nativeElement.offsetHeight;\n      this.windowHeight = window.innerHeight;\n    }\n\n    saveScrollPos() {\n      this.scrollPos = window.scrollY;\n    }\n\n    getOffsetTop(element) {\n      let offsetTop = element.offsetTop || 0;\n\n      if (element.offsetParent) {\n        offsetTop += this.getOffsetTop(element.offsetParent);\n      }\n\n      return offsetTop;\n    }\n\n    checkVisibility() {\n      if (this.isVisible()) {\n        // double check dimensions (due to async loaded contents, e.g. images)\n        this.saveDimensions();\n\n        if (this.isVisible()) {\n          this.unsubscribe();\n          this.appear.emit();\n        }\n      }\n    }\n\n    isVisible() {\n      return this.scrollPos >= this.elementPos || this.scrollPos + this.windowHeight >= this.elementPos + this.elementHeight;\n    }\n\n    subscribe() {\n      this.subscriptionScroll = fromEvent(window, 'scroll').pipe(startWith(null)).subscribe(() => {\n        this.saveScrollPos();\n        this.checkVisibility();\n      });\n      this.subscriptionResize = fromEvent(window, 'resize').pipe(startWith(null)).subscribe(() => {\n        this.saveDimensions();\n        this.checkVisibility();\n      });\n    }\n\n    unsubscribe() {\n      if (this.subscriptionScroll) {\n        this.subscriptionScroll.unsubscribe();\n      }\n\n      if (this.subscriptionResize) {\n        this.subscriptionResize.unsubscribe();\n      }\n    }\n\n    ngAfterViewInit() {\n      this.subscribe();\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe();\n    }\n\n  }\n\n  AppearDirective.ɵfac = function AppearDirective_Factory(t) {\n    return new (t || AppearDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  AppearDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AppearDirective,\n    selectors: [[\"\", \"appear\", \"\"]],\n    outputs: {\n      appear: \"appear\"\n    }\n  });\n  return AppearDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}